
/********************************** CExtension.js ********************************/
//gmail code
var emailval= null;
var gmail = null;
var mailId = null;
var runCode = function() {
	var gmail = Gmail();

	var email_data = gmail.get.email_data();
//	$(".AO").append("<div style='float:right;width:4%;font-size: 0.8125em;font-family:Open Sans,Trebuchet MS,Arial;' id='mainContent'><iframe src='../html/slidepanel.html' name='"+emailval+"' scrolling='no' style='border:none;height:900px;width:100%;'></iframe></div>");
	if(email_data) {
		window.postMessage({"type" : "edata", "str_data" : JSON.stringify(email_data) }, '*');
	}
};

//check if jquery is loaded and init
var checkLoaded = function() {
	if(window.jQuery) {
		$.fn.onAvailable = function(e) {
			var t = this.selector;
			var n = this;
			if (this.length > 0) e.call(this);
			else {
				var r = setInterval(function () {
					if ($(t).length > 0) {
						e.call($(t));
						clearInterval(r);
					}
				}, 50);
			}
		};

		if (typeof Gmail != 'undefined') {
			gmail = Gmail();
		}else{
			var Gmail =  function() {

				var api = {
						get : {},
						observe : {},
						check : {},
						tools : {},
						tracker : {},
						dom : {}
				};


				api.version           = "0.2.2";
				api.tracker.globals   = GLOBALS;
				api.tracker.view_data = VIEW_DATA;
				api.tracker.ik        = api.tracker.globals[9];



				api.get.last_active = function() {
					var data = api.tracker.globals[17][15];
					return {
						time : data[1],
						ip : data[3],
						mac_address : data[9],
						time_relative : data[10]
					};
				};


				api.get.loggedin_accounts = function() {
					var data = api.tracker.globals[17][23];
					var users = [];

					for(var i in data[1]) {
						users.push({name : data[1][i][4], email : data[1][i][0]});
					}

					return users;
				};


				api.get.user_email = function() {
					return api.tracker.globals[10];
				};


				api.check.is_thread = function() {
					var check_1 = $('.nH .if').children(":eq(1)").children().children(":eq(1)").children();
					var check_2 = api.get.email_ids();

					return check_1.length > 1 || check_2.length > 1;
				};


				api.dom.inbox_content = function() {
					return $('div[role=main]:first');
				};


				api.check.is_preview_pane = function() {
					var dom = api.dom.inbox_content();
					var boxes = dom.find("[gh=tl]");

					var previewPaneFound = false;
					boxes.each(function() {
						if($(this).hasClass('aia')) {
							previewPaneFound = true;
						}
					});

					return previewPaneFound;
				};


				api.dom.inboxes = function() {
					var dom = api.dom.inbox_content();
					return dom.find("[gh=tl]");
				};


				api.check.is_multiple_inbox = function() {
					var dom = api.dom.inboxes();
					return dom.length > 1;
				};


				api.check.is_horizontal_split = function() {
					var dom = api.dom.inbox_content();
					var box = dom.find("[gh=tl]").find('.nn');

					return box.length == 0; 
				};


				api.check.is_vertical_split = function() {
					return api.check.is_horizontal_split() == false;
				};


				api.check.is_tabbed_inbox = function() {
					return $(".aKh").length == 1;
				};


				api.check.is_right_side_chat = function() {
					return $('.ApVoH')[0].getAttribute('aria-labelledby') == ':wf';
				}


				api.check.is_google_apps_user =function() {
					var email = api.get.user_email();
					return email.indexOf('gmail.com', email.length - 'gmail.com'.length) == -1;
				};


				api.get.storage_info = function() {
					var div = $('.md.mj').find('div')[0];
					var used = $(div).find('span')[0].text;
					var total = $(div).find('span')[1].text;
					var percent = parseFloat(used.replace(/[^0-9\.]/g, '')) * 100 / parseFloat(total.replace(/[^0-9\.]/g, ''));

					return {used : used, total : total, percent : Math.floor(percent)};
				};


				api.dom.email_subject = function () {
					var e = $(".hP");

					for(var i=0; i<e.length; i++) {
						if($(e[i]).is(':visible')) {
							return $(e[i]);
						}
					}

					return $();
				};


				api.get.email_subject = function() {
					var subject_dom = api.dom.email_subject();

					return subject_dom.text();
				};


				api.dom.email_body = function() {
					return $('.nH.hx');
				};


				api.check.is_inside_email = function() {
					if(api.get.current_page() != null && !api.check.is_preview_pane()) {
						return false;
					}

					var items = $('.ii.gt');
					var ids = [];

					for(var i=0; i<items.length; i++) {
						var mail_id = items[i].getAttribute('class').split(' ')[2];
						if(mail_id != 'undefined' && mail_id != undefined) {
							if($(items[i]).is(':visible')) {
								ids.push(items[i]);
							}
						}
					}

					return ids.length > 0;
				};


				api.dom.email_contents = function() {
					var items = $('.ii.gt');
					var ids = [];

					for(var i=0; i<items.length; i++) {
						var mail_id = items[i].getAttribute('class').split(' ')[2];
						var is_editable = items[i].getAttribute('contenteditable');
						if(mail_id != 'undefined' && mail_id != undefined) {
							if(is_editable != 'true') {
								ids.push(items[i]);
							}
						}
					}

					return ids;
				};


				api.get.email_ids = function() {
					if(api.check.is_inside_email()) {
						var data = api.get.email_data();
						return Object.keys(data.threads);
					}
					return [];
				};

				api.get.compose_ids = function() {
					var ret = [];
					var dom = $(".AD [name=draft]");
					for(var i = 0; i < dom.length; i++) {
						if(dom[i].value != "undefined"){
							ret.push(dom[i].value);
						}
					}
					return ret;
				};

				api.get.email_id = function() {
					var hash = null;

					if(api.check.is_inside_email()) {
						if(api.check.is_preview_pane()) {
							var items = api.dom.email_contents();
							var text = [];

							for(var i=0; i<items.length; i++) {
								var mail_id = items[i].getAttribute('class').split(' ')[2];
								var is_editable = items[i].getAttribute('contenteditable');
								if(mail_id != 'undefined' && mail_id != undefined) {
									if(is_editable != 'true') {
										text.push(mail_id);
									}
								}
							}

							hash = text[0].substring(1, text[0].length);
						} else {
							hash = window.location.hash.split("/").pop().replace(/#/, '').split('?')[0];
						}

					}

					return hash;
				};


				api.check.is_priority_inbox = function() {
					return $('.qh').length > 0;
				};


				api.check.is_rapportive_installed = function() {
					return $('#rapportive-sidebar').length == 1;
				};


				api.check.is_streak_installed = function() {
					return $("[id^='bentoBox'],[id*=' bentoBox'],[class*=' bentoBox'],[class*='bentoBox']").length > 0;
				};


				api.check.is_anydo_installed = function() {
					return $("[id^='anydo'],[id*=' anydo'],[class*=' anydo'],[class*='anydo']").length > 0;
				};


				api.check.is_boomerang_installed = function() {
					return $("[id^='b4g_'],[id*=' b4g_'],[class*=' b4g_'],[class*='b4g_']").length > 0;
				};


				api.check.is_xobni_installed = function() {
					return $('#xobni_frame').length > 0;
				};


				api.check.is_signal_installed = function() {
					return $("[id^='Signal'],[id*=' Signal'],[class*=' signal'],[class*='signal']").length > 0;
				};


				api.dom.get_left_sidebar_links = function() {
					return $("div[role=navigation] [title]");
				};


				api.dom.search_bar = function() {
					return $("[gh=sb]");
				};


				api.get.search_query = function() {
					var dom = api.dom.search_bar();
					return dom.find('input')[0].value;
				};


				api.get.unread_inbox_emails = function() {
					var dom = $("div[role=navigation]").find("[title*='" + api.tools.i18n('inbox') + "']");

					if(dom.length > 0) {
						if(dom[0].text.indexOf('(') != -1) {
							return parseInt(dom[0].text.replace(/[^0-9]/g, ''));
						}
					}

					return 0;
				};


				api.get.unread_draft_emails = function() {
					var dom = $("div[role=navigation]").find("[title*='" + api.tools.i18n('drafts') + "']");

					if(dom.length > 0) {
						if(dom[0].text.indexOf('(') != -1) {
							return parseInt(dom[0].text.replace(/[^0-9]/g, ''));
						}
					}

					return 0;
				};


				api.get.unread_spam_emails = function() {
					var dom = $("div[role=navigation]").find("[title*='" + api.tools.i18n('spam') + "']");

					if(dom.length > 0) {
						if(dom[0].text.indexOf('(') != -1) {
							return parseInt(dom[0].text.replace(/[^0-9]/g, ''));
						}
					}

					return 0;
				};


				api.get.unread_forum_emails = function() {
					var dom = $("div[role=navigation]").find("[title*='" + api.tools.i18n('forums') + "']");

					if(dom.length > 0) {
						if(dom[0].text.indexOf('(') != -1) {
							return parseInt(dom[0].text.replace(/[^0-9]/g, ''));
						}
					}

					return 0;
				};


				api.get.unread_update_emails = function() {
					var dom = $("div[role=navigation]").find("[title*='" + api.tools.i18n('updates') + "']");

					if(dom.length > 0) {
						if(dom[0].text.indexOf('(') != -1) {
							return parseInt(dom[0].text.replace(/[^0-9]/g, ''));
						}
					}

					return 0;
				};


				api.get.unread_promotion_emails = function() {
					var dom = $("div[role=navigation]").find("[title*='" + api.tools.i18n('promotions') + "']");

					if(dom.length > 0) {
						if(dom[0].text.indexOf('(') != -1) {
							return parseInt(dom[0].text.replace(/[^0-9]/g, ''));
						}
					}

					return 0;
				};


				api.get.unread_social_emails = function() {
					var dom = $("div[role=navigation]").find("[title*='" + api.tools.i18n('social_updates') + "']");

					if(dom.length > 0) {
						if(dom[0].text.indexOf('(') != -1) {
							return parseInt(dom[0].text.replace(/[^0-9]/g, ''));
						}
					}

					return 0;
				};


				api.get.beta = function() {
					var features = {
							"new_nav_bar" : $('#gbz').length == 0
					};

					return features;
				};


				api.get.unread_emails = function() {
					return { inbox         : api.get.unread_inbox_emails(),
						drafts        : api.get.unread_draft_emails(),
						spam          : api.get.unread_spam_emails(),
						forum         : api.get.unread_forum_emails(),
						update        : api.get.unread_update_emails(),
						promotions    : api.get.unread_promotion_emails(),
						social        : api.get.unread_social_emails() };
				};


				api.tools.parse_url = function(url) {
					var regex = /[?&]([^=#]+)=([^&#]*)/g;
					var params = {};
					var match;

					while (match = regex.exec(url)) {
						params[match[1]] = match[2];
					}

					return params;
				};


				api.tools.sleep = function(milliseconds) {
					var start = new Date().getTime();
					while(true) {
						if ((new Date().getTime() - start) > milliseconds){
							break;
						}
					}
				};


				api.tools.multitry = function(delay, tries, func, check, counter, retval) {
					if(counter != undefined && counter >= tries) {
						return retval;
					}

					var counter = (counter == undefined) ? 0 : counter;
					var value = func();

					if(check(value)) {
						return value;
					} else {
						api.tools.sleep(delay);
						api.tools.multitry(delay, tries, func, check, counter+1, value);
					}
				};


				api.tools.deparam = function (params, coerce) {

					var each = function (arr, fnc) {
						var data = [];
						for (i = 0; i < arr.length; i++) {
							data.push(fnc(arr[i]));
						}
						return data;
					};

					var isArray = Array.isArray || function(obj) {
						return Object.prototype.toString.call(obj) == '[object Array]';
					};

					var obj = {},
					coerce_types = {
							'true': !0,
							'false': !1,
							'null': null
					};
					each(params.replace(/\+/g, ' ').split('&'), function (v, j) {
						var param = v.split('='),
						key = decodeURIComponent(param[0]),
						val,
						cur = obj,
						i = 0,
						keys = key.split(']['),
						keys_last = keys.length - 1;
						if (/\[/.test(keys[0]) && /\]$/.test(keys[keys_last])) {
							keys[keys_last] = keys[keys_last].replace(/\]$/, '');
							keys = keys.shift().split('[').concat(keys);
							keys_last = keys.length - 1;
						} else {
							keys_last = 0;
						}
						if (param.length === 2) {
							val = decodeURIComponent(param[1]);
							if (coerce) {
								val = val && !isNaN(val) ? +val : val === 'undefined' ? undefined : coerce_types[val] !== undefined ? coerce_types[val] : val;
							}
							if (keys_last) {
								for (; i <= keys_last; i++) {
									key = keys[i] === '' ? cur.length : keys[i];
									cur = cur[key] = i < keys_last ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : []) : val;
								}
							} else {
								if (isArray(obj[key])) {
									obj[key].push(val);
								} else if (obj[key] !== undefined) {
									obj[key] = [obj[key], val];
								} else {
									obj[key] = val;
								}
							}
						} else if (key) {
							obj[key] = coerce ? undefined : '';
						}
					});
					return obj;
				};


				api.tools.parse_actions = function(params) {

					if(params.url.act == 'fup' || params.url.act == 'fuv' || typeof params.body == "object") {
						// a way to stop observers when files are being uploaded. See issue #22
						return;
					}

					if(params.method == 'POST' && typeof params.url.act == 'string') {
						// console.log(params.url, params.body);
					}

					if(params.url.search != undefined) {
						// console.log(params.url, params.body, params.url_raw);
					}

					var action_map = {
							'tae'         : 'add_to_tasks',
							'rc_^i'       : 'archive',
							'tr'          : 'delete',
							'dm'          : 'delete_message_in_thread',
							'dl'          : 'delete_forever',
							'dc_'         : 'delete_label',
							'dd'          : 'discard_draft',
							'el'          : 'expand_categories',
							'cffm'        : 'filter_messages_like_these',
							'arl'         : 'label',
							'mai'         : 'mark_as_important',
							'mani'        : 'mark_as_not_important',
							'us'          : 'mark_as_not_spam',
							'sp'          : 'mark_as_spam',
							'mt'          : 'move_label',
							'ib'          : 'move_to_inbox',
							'ig'          : 'mute',
							'rd'          : 'read',
							'sd'          : 'save_draft',
							'sm'          : 'send_message',
							'mo'          : 'show_newly_arrived_message',
							'st'          : 'star',
							'ug'          : 'unmute',
							'ur'          : 'unread',
							'xst'         : 'unstar',
							'new_mail'    : 'new_email',
							'poll'        : 'poll',
							'refresh'     : 'refresh',
							'rtr'         : 'restore_message_in_thread',
							'open_email'  : 'open_email' 
					};

					if(typeof params.url.ik == 'string') {
						api.tracker.ik = params.url.ik;
					}

					if(typeof params.url.rid == 'string') {
						if(params.url.rid.indexOf("mail") != -1) {
							api.tracker.rid = params.url.rid;
						}
					}

					var action      = decodeURIComponent(params.url.act);
					var sent_params = api.tools.deparam(params.body);
					var email_ids   = (typeof sent_params.t == 'string') ? [sent_params.t] : sent_params.t;
					var response    = null;

					switch(action) {
					case "ur":
					case "rd":
					case "tr":
					case "sp":
					case "us":
					case "ib":
					case "dl":
					case "st":
					case "xst":
					case "mai":
					case "mani":
					case "ig":
					case "ug":
					case "dd":
					case "mt":
					case "cffm":
					case "rc_^i":
						var response = [email_ids, params.url, params.body];
						break;

					case "arl":
						var response = [email_ids, params.url, params.body, params.url.acn];
						break;

					case "sd":
						var response = [email_ids, params.url, sent_params];
						break;

					case "tae":
					case "sm":
						var response = [params.url, params.body, sent_params];
						break;

					case "el":
						var response = [params.url, params.body, sent_params.ex == '1'];
						break;

					case "dm":
					case "rtr":
						var response = [sent_params.m, params.url, params.body];
						break;

					}

					if(typeof params.url._reqid == 'string' && typeof params.url.th == 'string') {
						var response = [params.url.th, params.url, params.body];
						if('new_email' in api.tracker.watchdog) {
							api.tracker.watchdog['new_email'].apply(undefined, response);
						}
					}

					if((params.url.view == 'cv' || params.url.view == 'ad') && typeof params.url.th == 'string' && typeof params.url.search == 'string' && params.url.rid == undefined) {
						var response = [params.url.th, params.url, params.body];
						if('open_email' in api.tracker.watchdog) {
							api.tracker.watchdog['open_email'].apply(undefined, response);
						}
					}

					if(typeof params.url.SID == 'string' && typeof params.url.zx == 'string' && params.body.indexOf('req0_') != -1) {
						api.tracker.SID = params.url.SID;
						var response = [params.url, params.body, sent_params];
						if('poll' in api.tracker.watchdog) {
							api.tracker.watchdog['poll'].apply(undefined, response);
						}
					}

					if(typeof params.url.ik == 'string' && typeof params.url.search == 'string' && params.body.length == 0 && typeof params.url._reqid == 'string') {
						var response = [params.url, params.body, sent_params];
						if('refresh' in api.tracker.watchdog) {
							api.tracker.watchdog['refresh'].apply(undefined, response);
						}
					}

					if(response != null) {
						if(action_map[action] in api.tracker.watchdog) {
							api.tracker.watchdog[action_map[action]].apply(undefined, response);
						}
					}

				}

				api.tools.parse_requests = function(params) {
					params.url_raw = params.url;
					params.url = api.tools.parse_url(params.url);

					if(typeof api.tracker.events != 'object' && typeof api.tracker.actions != 'object') {
						api.tracker.events  = [];
						api.tracker.actions = [];
					}

					api.tracker.events.unshift(params);
					api.tools.parse_actions(params);

					if(params.method == 'POST' && typeof params.url.act == 'string') {
						api.tracker.actions.unshift(params);
					}

					if(api.tracker.events.length > 50) {
						api.tracker.events.pop();
					}

					if(api.tracker.actions.length > 10) {
						api.tracker.actions.pop();
					}
				}


				api.tools.xhr_watcher = function () {
					var self = this;

					if (!api.tracker.xhr_init) {
						var win = top.document.getElementById("js_frame").contentDocument.defaultView;

						api.tracker.xhr_init = true;
						api.tracker.xhr_open = win.XMLHttpRequest.prototype.open;
						api.tracker.xhr_send = win.XMLHttpRequest.prototype.send;

						win.XMLHttpRequest.prototype._gjs_open = win.XMLHttpRequest.prototype.open;
						win.XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
							var out = this._gjs_open.apply(this, arguments);
							this.xhrParams = {
									method: method.toString(),
									url: url.toString()
							};
							return out;
						};

						win.XMLHttpRequest.prototype._gjs_send = win.XMLHttpRequest.prototype.send;
						win.XMLHttpRequest.prototype.send = function (body) {
							var out = this._gjs_send.apply(this, arguments);
							if (this.xhrParams) {
								this.xhrParams.body = body;
								api.tools.parse_requests(this.xhrParams);
							}

							return out;
						}
					}
				}


				api.observe.http_requests = function() {
					return api.tracker.events;
				}


				api.observe.actions = function() {
					return api.tracker.actions;
				}


				api.observe.on = function(action, callback) {
					if(typeof api.tracker.watchdog != "object") {
						api.tracker.watchdog = {};
					}

					if(!api.tracker.xhr_init) {
						api.tools.xhr_watcher();
					}

					api.tracker.watchdog[action] = callback;
				}


				api.observe.off = function(action) {
					if(action) {
						if('watchdog' in api.tracker) {
							if(action in api.tracker.watchdog) {
								delete api.tracker.watchdog[action];
							}
						}
					} else {
						var win = top.document.getElementById("js_frame").contentDocument.defaultView;
						win.XMLHttpRequest.prototype.open = api.tracker.xhr_open;
						win.XMLHttpRequest.prototype.send = api.tracker.xhr_send;
						api.tracker.xhr_init = false
					}
				}


				api.tools.make_request = function (link, method) {

					var method  = (typeof method == undefined || typeof method == null) ? 'GET' : method;
					var request = $.ajax({ type: method, url: encodeURI(link), async:false });

					return request.responseText;
				}


				api.tools.parse_view_data = function(view_data) {
					var parsed = [];
					var data = [];

					for(var j=0; j < view_data.length; j++) {
						if(view_data[j][0] == 'tb') {
							for(var k=0; k < view_data[j][2].length; k++) {
								data.push(view_data[j][2][k]);
							}
						}
					}

					for(var i=0; i < data.length; i++) {
						var x = data[i];
						var temp = {};

						parsed.push({
							id: x[0],
							title : x[9],
							excerpt : x[10],
							time : x[15],
							sender : x[28],
							attachment : x[13],
							labels: x[5]
						});
					}

					return parsed;
				}


				api.get.visible_emails = function() {
					var page = api.get.current_page();
					var url = window.location.origin + window.location.pathname + '?ui=2&ik=' + api.tracker.ik+'&rid=' + api.tracker.rid + '&view=tl&start=0&num=120&rt=1';

					if(page.indexOf('label/') == 0) {
						url += '&cat=' + page.split('/')[1] +'&search=cat';
					} else if(page.indexOf('category/') == 0) {
						if(page.indexOf('forums') != -1) {
							cat_label = 'group';
						} else if(page.indexOf('updates') != -1) {
							cat_label = 'notification';
						} else if(page.indexOf('promotion') != -1) {
							cat_label = 'promo';
						} else if(page.indexOf('social') != -1) {
							cat_label = 'social';
						}
						url += '&cat=^smartlabel_' + cat_label +'&search=category';
					} else if(page.indexOf('search/') == 0) {
						url += '&qs=true&q=' + page.split('/')[1] +'&search=query';
					} else {
						url += '&search=' + page;
					}

					var get_data = api.tools.make_request(url);
					get_data = get_data.substring(get_data.indexOf('['), get_data.length);
					get_data = 'api.tracker.view_data = ' + get_data;

					eval(get_data)

					var emails = [];

					for(var i in api.tracker.view_data) {
						var cdata = api.tools.parse_view_data(api.tracker.view_data[i]);
						if(cdata.length > 0) {
							$.merge(emails, cdata);
						}
					}

					return emails;
				}


				api.get.current_page = function() {
					var hash  = window.location.hash.split('#').pop();
					var pages = ['sent', 'inbox', 'starred', 'drafts', 'imp', 'chats', 'all', 'spam', 'trash'];

					var page = null;

					if($.inArray(hash, pages) > -1) {
						page = hash;
					}

					if(hash.indexOf('label/') == 0 || hash.indexOf('category/') == 0 || hash.indexOf('search/') == 0) {
						if(hash.split('/').length < 3) {
							page = hash;
						}
					}

					return page;
				}


				api.tools.parse_email_data = function(email_data) {
					var data = {};
					var threads = {}

					for(var i in email_data) {
						var x = email_data[i];
						if(x[0] == 'cs') {
							data.first_email = x[1];
							data.last_email = x[2];
							data.total_emails = x[3];
							data.total_threads = x[8];
							data.people_involved = x[15];
							data.subject = x[23];
						}

						if(x[0] == 'ms') {
							if(data.threads == undefined) {
								data.threads = {};
							}

							data.threads[x[1]] = {};
							data.threads[x[1]].is_deleted = x[13] == undefined;
							data.threads[x[1]].reply_to_id = x[2];
							data.threads[x[1]].from = x[5];
							data.threads[x[1]].from_email = x[6];
							data.threads[x[1]].timestamp = x[7];
							data.threads[x[1]].datetime = x[24];
							data.threads[x[1]].attachments = x[21].split(',');
							data.threads[x[1]].content_plain = x[8];
							data.threads[x[1]].subject = x[12];
							data.threads[x[1]].content_html = (x[13] != undefined) ? x[13][6] : x[8];
							data.threads[x[1]].to = (x[13] != undefined) ? x[13][1] : [];
							data.threads[x[1]].cc = (x[13] != undefined) ? x[13][2] : [];
							data.threads[x[1]].bcc = (x[13] != undefined) ? x[13][3] : [];
						}
					}

					return data;
				}


				api.get.email_data = function(email_id) {

					if(api.check.is_inside_email() && email_id == undefined) {
						email_id = api.get.email_id();
					}

					if(email_id != undefined) {
						var url = window.location.origin + window.location.pathname + '?ui=2&ik=' + api.tracker.ik + '&rid=' + api.tracker.rid + '&view=cv&th=' + email_id + '&msgs=&mb=0&rt=1&search=inbox';
						var get_data = api.tools.make_request(url);
						get_data = get_data.substring(get_data.indexOf('['), get_data.length);
						get_data = 'var cdata = ' + get_data;

						eval(get_data);

						api.tracker.email_data = cdata[0];

						return api.tools.parse_email_data(api.tracker.email_data);
					}

					return {};
				}


				api.tools.i18n = function(label) {
					var locale = api.tracker.globals[17][9][8];
					var dictionary;

					switch (locale) {
					case 'fr':
						dictionary = {
							'inbox': 'Boï¿½ï¿½ï¿½ï¿½te de rï¿½ï¿½ï¿½ï¿½ception',
							'drafts': 'Brouillons',
							'spam': 'Spam',
							'forums': 'Forums',
							'updates': 'Mises ï¿½ï¿½  jour',
							'promotions': 'Promotions',
							'social_updates': 'Rï¿½ï¿½ï¿½ï¿½seaux sociaux'
					};
						break;

					case 'en':
					default:
						dictionary = {
							'inbox': 'Inbox',
							'drafts': 'Drafts',
							'spam': 'Spam',
							'forums': 'Forums',
							'updates': 'Updates',
							'promotions': 'Promotions',
							'social_updates': 'Social Updates'
					};
					break;
					}

					return dictionary[label];
				}


				return api;
			}
			gmail = Gmail();
		}

		emailval= gmail.get.user_email();
//		alert( "Email : " + emailval);

//		gmail.observe.on("new_email", function(id, url, body) {
//		  console.log("id:", id, "url:", url, 'body', body);
//		})
//
//		gmail.observe.on("refresh", function(url, body, data) {
//		  console.log("url:", url, 'body', body, 'data', data);
//		})

		gmail.observe.on("open_email", function(id, url, body) {
		  console.log("mail opened");
		  console.log("id:", id, "url:", url, 'body', body);
		  mailId = id;
		})

		
		var height = $( window ).height() - $( window ).height()*0.26;
		var str = height+"";
		var parts = str.split(".");
		var mainDivHeight = parts[0];
		mainDivHeight = mainDivHeight.trim();
		
		runCode();

	} else {
		setTimeout(checkLoaded, 100);
	}
}


/************************************* Utilities.js **********************************/
function emulateMouseClick(element) {
  if (!element) throw new Error('Clicking on no element');

  //create simulated mouse event 'click'
  evt = document.createEvent('MouseEvents');
  
  /*setup simulated mouse 'click'
  initMouseEvent(type,bubbles,cancelable,view,detail,screenx,screeny,clientx,clienty,ctrlKey,altKey,
  shiftKey, metaKey,button, relatedTarget */
  evt.initMouseEvent('mousedown', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
  
  //invoke simulated clicked event
  element.dispatchEvent(evt);

  evt = document.createEvent('MouseEvents');
  evt.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
  element.dispatchEvent(evt);

  evt = document.createEvent('MouseEvents');
  evt.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
  element.dispatchEvent(evt);
}

function getCookie(c_name) {
  var i, x, y, ARRcookies = document.cookie.split(';');
  for (i = 0; i < ARRcookies.length; i++) {
    x = ARRcookies[i].substr(0, ARRcookies[i].indexOf('='));
    y = ARRcookies[i].substr(ARRcookies[i].indexOf('=') + 1);
    x = x.replace(/^\s+|\s+$/g, '');
    if (x == c_name) {
      return unescape(y);
    }
  }
}

function retryFunction(fn, interval, tries, failFn, finallyFn) {
  if (tries) {
    var fnStatus = fn();
    if (fnStatus) {
      console.debug('Retry function was successful. Ending function.');
      if (finallyFn) finallyFn();
    } else {
      console.debug('Retrying function', 'in', interval, 'ms');

      var args = arguments;
      args[2] = --tries;
      setTimeout(function() {
        retryFunction.apply(null, args);
      }, interval);
    }
  } else {
    if (failFn) failFn();
    if (finallyFn) finallyFn();

    console.debug('Max tries exceeded; timed out');
  }
}

function executeFn2InFnWithADelayMaxOnceAPeriod(fn, fn2, delay, period) {
  var lastExecution = Date.now();
  var lock = false;

  function execute() {
    fn2();

    lastExecution = Date.now();
    lock = false;
  }

  fn(function() {
    if (lock) return;
    else lock = true;

    var timeSinceLastExecution = (Date.now() - lastExecution);
    if (timeSinceLastExecution > period) {
      setTimeout(execute, delay);
    } else {
      setTimeout(execute, (period - timeSinceLastExecution) + delay);
    }
  });
}

function stopEvent(e) {
  e.stopPropagation();
  e.preventDefault();
  e.stopImmediatePropagation();
}

/***********************************onlineMode.js************************************/
function OnlineMode() {
  function insertMutationObserver() {

    function executeOtherMutation() {
      getNewMessageCompose().each(function() {
        $(this).addClass('classificationNecessitatorRecognizedCompose');
        new Compose($(this));
      });
      getNewMessageRplyOrFrwd().each(function() {
    	  if(typeof Gmail !== "undefined"){ 
            	var gmail = Gmail();
            	
//            	var id = window.location.hash.split('#')[1].split('/')[1];
//            	console.log("id :" + id);
            	console.log("mailId :" + mailId);
            	id = mailId;
            	
//            	console.log(gmail.get.email_data(id));
				  var mailData = gmail.get.email_data(id)
				  if(typeof mailData !== "undefined" && typeof mailData.subject !== "undefined"){
					  var sub = mailData.subject.toLowerCase();
					  
//					  var classifiers = ["public:", "private:","restricted:","confident:"];
					  var classifiers = $('#gcontrol-classifiers').html().split(",");
					  var strFound = false;
					  var type = "";
					  for(var i= 0 ; i< classifiers.length ; i++){
						  if (sub.indexOf(classifiers[i]) >= 0){
							  console.log("specifier found");
							  strFound = true;
							  type = classifiers[i];
							  break;
						  }
					  }
					  
					  if(strFound == false){
						  $(this).addClass('classificationNecessitatorRecognizedCompose');
			                new Compose($(this));
					  } else {
						  $(this).addClass('classificationNecessitatorRecognizedCompose');
						  new Compose($(this), true , type);
					  }
				  } else 
					  console.log("Maildata or Subject not found");
            	
          }
        });
    }

    function getNewMessageCompose() {
    	return $('.ar4.x, .aaZ').not('.ar4.x .aaZ, .classificationNecessitatorRecognizedCompose, :contains(.classificationNecessitatorRecognizedCompose), .classificationNecessitatorRecognizedCompose *');
//      return $('.ar4.x, .M9').not('.ar4.x .M9, .classificationNecessitatorRecognizedCompose, :contains(.classificationNecessitatorRecognizedCompose), .classificationNecessitatorRecognizedCompose *');
    }
    function getNewMessageRplyOrFrwd() {
    	return $('.ar4.x, .ip.adB > .M9').not('.ar4.x .ip.adB > .M9, .classificationNecessitatorRecognizedCompose, :contains(.classificationNecessitatorRecognizedCompose), .classificationNecessitatorRecognizedCompose *');
//      return $('.ar4.x, .M9').not('.ar4.x .M9, .classificationNecessitatorRecognizedCompose, :contains(.classificationNecessitatorRecognizedCompose), .classificationNecessitatorRecognizedCompose *');
    }

    executeFn2InFnWithADelayMaxOnceAPeriod(function(fn) {
      new MutationObserver(fn).observe(document.body, {
        childList: true,
        subtree: true
      });
    }, executeOtherMutation, 50, 100);
  }

  var that = this;
  var initialized = false;

  this.initialize = function() {
    insertMutationObserver();

    initialized = true;
  };
}

function Compose($composeContainer, updateBtnFlag, typeOfClassifier) {
  console.log('New Compose');

  var $labelContainer;
  var confidentialButton;
  var sendButton;
  var extraButtons = [];
  var $labelFormField;
  var $classifybtnContainer;

  if (typeof updateBtnFlag === "undefined"){
	  updateBtnFlag = false;
	  typeOfClassifier = "";
  }
  
  function SendButton() {
    console.log('New SendButton');
    var that = this;

    var $originalSendBtn;
    var $activeBtn; // temp object which refers currently active button
    var $newSendBtnInvalid;
    var $newSendBtnValid;

    var sendElement;

    this.sendCallback = null;

    this.updateBtn = function(isValid) {
      var $newActiveBtn = isValid ? $newSendBtnValid : $newSendBtnInvalid;

      $activeBtn.hide();
      $newActiveBtn.show();
      $activeBtn = $newActiveBtn;
    };

    function clickInvalid(e) {
      alert('Please select message classifier.');
      if(typeof $classifybtnContainer !== 'undefined')
    	  $classifybtnContainer.children().click();
    }

    function clickValid(e) {
      emulateMouseClick(sendElement);
      sendEmail();
    }

    function init() {
      var $formField = $('form > input:first', $composeContainer).first();
      $labelFormField = $formField.clone();
      $labelFormField.prop("name", "alongForTheRideData");
      $labelFormField.val("");
      $labelFormField.insertBefore($formField);

      $originalSendBtn = $('.gU.Up, .nS', $composeContainer).hide();
      $activeBtn = $originalSendBtn;

      sendElement = $originalSendBtn.is('[role=button]') ? $originalSendBtn[0] : $originalSendBtn.find('[role=button]')[0];

      $newSendBtnInvalid = $originalSendBtn.clone().css({
        '-webkit-filter': 'grayscale(100%)',
        'filter': 'grayscale(100%)',
        'filter': 'url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale")'
      }).addClass('InvalidBtn').click(clickInvalid);
      $newSendBtnValid = $originalSendBtn.clone().addClass('validBtn').click(clickValid);
      $([$newSendBtnValid, $newSendBtnInvalid]).each(function() {
        $(this).hover(function() {
          $(this).addClass('T-I-JW');
        }, function() {
          $(this).removeClass('T-I-JW');
        });
        $(this).removeAttr('id').each(function(i, v) {
          $(v).insertAfter($originalSendBtn[i]);
        });
      });
    }

    init();
  }

  function init() {
    sendButton = new SendButton($composeContainer);

    var $extraButtonsPlacement = $('.gU.Up, .nS', $composeContainer).first().parent().children().last();

    if(updateBtnFlag == true){
    	if(typeOfClassifier.indexOf(":") > -1)
    		typeOfClassifier = typeOfClassifier.replace(":","");
    	sendButton.updateBtn(1);
    	$labelFormField.val(JSON.stringify({tag:typeOfClassifier}));
    } else {
	    var topOfRadioBtnDiv = "70%";
	    var leftOfRadioBtnDiv = "350px";
	    if($composeContainer.attr("class").indexOf("aaZ") == -1){
	    	leftOfRadioBtnDiv =  ($composeContainer.width() - 150 ) + "px";
	    	topOfRadioBtnDiv =  ($composeContainer.position().top + 100 ) + "px";
	    }
	    	
	    var $buttonDiv = $('<td class="gU">');
	    var $radiobuttonDiv = $('<div class="J-M jQjAxd classify" role="menu" aria-haspopup="true" style="-webkit-user-select: none; visibility: hidden; left: ' + leftOfRadioBtnDiv + '; top: ' + topOfRadioBtnDiv + ';width: 100px;padding-left: 20px;"></div>');
	    
	    $classifybtnContainer = $buttonDiv.clone().insertBefore($extraButtonsPlacement).html('<div class="classify" data-tooltip="Classify" aria-label="Classify" style="float: right;-webkit-user-select: none;"><div class="oh J-Z-I J-J5-Ji T-I-ax7" style="-webkit-user-select: none;"><div class="J-J5-Ji J-Z-I-J6-H" style="-webkit-user-select: none;"><img src="https://testmshelloworld.appspot.com/Images/classify.png" style="margin-top: 5px;width:18px;height:18px;" alt="Classify"></div></div></div>');
	    //var $radiobtncontainer = $radiobuttonDiv.clone().html('<input type="radio" name="radio-group" id="public" value="public">&nbsp;&nbsp;<label for="public">Public</label><br><input type="radio" name="radio-group" id="private" value="private">&nbsp;&nbsp;<label for="private">Private</label><br><input type="radio"name="radio-group" id="restricted" value="restricted">&nbsp;&nbsp;<label for="restricted">Restricted</label><br><input type="radio" name="radio-group" id="confident" value="confident">&nbsp;&nbsp;<label for="confident">Confident</label>');
	    
	    var classifiers = $('#gcontrol-classifiers').html().split(",");
		  var html = "";
		  for(var i= 0 ; i< classifiers.length ; i++){
				  console.log("specifier found");
				  if(html == ""){
					  html = "<input type=\"radio\" name=\"radio-group\" id="+classifiers[i]+" value="+classifiers[i]+">&nbsp;&nbsp;<label for="+classifiers[i]+">"+classifiers[i]+"</label><br>";
				  }else{
					  html = html+"<input type=\"radio\" name=\"radio-group\" id="+classifiers[i]+" value="+classifiers[i]+">&nbsp;&nbsp;<label for="+classifiers[i]+">"+classifiers[i]+"</label><br>";
				  }
		  }
	    
	    var $radiobtncontainer = $radiobuttonDiv.clone().html(html);
	    
	    $classifybtnContainer.children().eq(0).children().hover(function() {
	    			$( this ).addClass("oi");
	    		}, function() {
	    			$( this ).removeClass("oi"); 
	    		} );
	    
	    if($composeContainer.attr("class").indexOf("aaZ") > -1)
	    	$composeContainer = $composeContainer.children();
	    $composeContainer.append($radiobtncontainer);
	    
	    $classifybtnContainer.children().click(function(){
			if ( $radiobtncontainer.css('visibility') == 'hidden' )
				$radiobtncontainer.css('visibility','visible');
			else
				$radiobtncontainer.css('visibility','hidden');
		});
	    
	    $("[name=radio-group]",$radiobtncontainer).click(function(){
	    	$radiobtncontainer.css("visibility","hidden");
	    	$labelFormField.val(JSON.stringify({tag:this.value}));
	    	sendButton.updateBtn(1);
		});
    
    	sendButton.updateBtn(0);
    }

    // Remove object when not needed anymore
    setTimeout(function remove() {
      if (!$.contains(document.documentElement, $composeContainer[0])) {
        console.log('Removing element.');
        $composeContainer.remove();
      } else setTimeout(remove, 1000);
    });
  }

  init();
}

function sendEmail() {
	alert("In sendEmail()");
  var setXMLSendProxy = function() {
	  alert("In setXMLSendProxy()");
      window.XMLHttpRequest.prototype._open = XMLHttpRequest.prototype.open;
      XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
        this.openParams = {
            url: url
        };
        return window.XMLHttpRequest.prototype._open.apply(this, arguments);
      };
      
      window.XMLHttpRequest.prototype._send = XMLHttpRequest.prototype.send;

      window.XMLHttpRequest.prototype.send = function send() {
        var defered = false;
        var dataIdentifier = /(&alongForTheRideData=|^alongForTheRideData=)(.*?)&/;
        
        alert("In send()");
         alert("Itypeof arguments[0] : "+typeof arguments[0]);
         alert("arguments :: "+arguments);
        if (typeof arguments[0] === "string" && arguments.length === 1) {
          var str = arguments[0];
          alert("Inside of first if");
          alert("str : " + str);
          if (this.openParams.url.match(/&act\=sm/) && str.match(/&bcc\=/) && str.match(dataIdentifier)) {
            defered = true;
            
            var sendData = (str.match(dataIdentifier) && str.match(dataIdentifier)[2]);
            var tag = JSON.parse(decodeURIComponent(sendData)).tag;

            alert("tag : " + tag);
            /* Modify the POST url to reflect the tag */
            str = str.replace(dataIdentifier, "");
            str = str.replace(/&subject=/, "&subject=" + tag + ": ");
            
            if (str.match(/ishtml\=1/)) {
	          str = str.replace(/&body\=/, "&body=<p>***<br>This email is " + tag.toLowerCase() + ".<br>***<p>");
	        } else if (str.match(/ishtml\=0/)) {
	          str = str.replace(/&body\=/, "&body=***\\nThis email is " + tag.toLowerCase() + ".\\n***");
	        }

            /* Capitalize the tag. */
            arguments[0] = str + "&acn=!" + tag.charAt(0).toUpperCase() + tag.slice(1).toLowerCase();

            window.XMLHttpRequest.prototype._send.apply(this, arguments);
          }
        } 

        if (!defered) { 
          window.XMLHttpRequest.prototype._send.apply(this, arguments);
        }
      };
    }
  window.location.href = 'javascript: (' + setXMLSendProxy.toString().replace(/(\n|\ {2,})/gm, '') + ')();';
}


sendEmail();

/***************************************main.js***********************************************/

window.onerror = function() {
  console.log('An error occured:', arguments);
  try {
    $(document).ready(function() {
      try {
        console.log('An error occured in the extension.');
//        window.location.reload();
      } catch (e) {
        console.log('Failed to show error', e);
      }
    });
  } catch (e) {
    console.log('Failed to show error', e);
  }
};

function getMode() {
  return !!location.href.match(/[\?|&]mui=ca/) ? 'offline' : 'online';
}

function init() {
  switch (getMode()) {
  case 'online':
    worker = new OnlineMode();
    worker.initialize();
    checkLoaded();
    break;
  case 'offline':
    break;
  }
}

if (window === top) init();
